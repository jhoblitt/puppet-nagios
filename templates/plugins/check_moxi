#!/bin/sh
#
# check_moxi for Nagios.
# Plugin to check that a moxi memcache proxy connection is alive.
#

PROGPATH=`dirname $0`

. $PROGPATH/utils.sh

print_usage() {
    echo "Usage: check_moxi [OPTIONS]...
Checks moxi status for nagios integration.

Mandatory arguments to long options are mandatory for short options too.
  -h, --help
  -s, --socket=FILE     UNIX socket to use to connect to moxi. Default: off
  -H, --host=HOST       Connection hostname or IP address. Default: 127.0.0.1
  -p, --port=PORT       TCP port to use to connect to moxi. Default: 11211

Examples:
  check_moxi -s /opt/moxi/moxi.sock
  check_moxi -p 11219
"
}

# Defaults.
exitstatus=$STATE_UNKNOWN
socket=
host="127.0.0.1"
port="11211"

# Grab the command line arguments.
while test -n "$1"; do
    case "$1" in
        --help|-h)
            print_usage
            exit $STATE_OK
            ;;
        --socket|-s)
            socket=$2
            shift
            ;;
        --host|-H)
            host=$2
            shift
            ;;
        --port|-p)
            port=$2
            shift
            ;;
        *)
            echo "Unknown argument: $1"
            print_usage
            exit $STATE_UNKNOWN
            ;;
    esac
    shift
done

# If we are here, make sure CRITICAL is the default
exitstatus=$STATE_CRITICAL

# If a socket is given, use that and ignore host/port
if [ -n "$socket" ]; then
    # sanity check
    which socat >/dev/null || message="socat not found. "
    # socat check
    message="${message}Socket ${socket}"
    STATS="`echo 'stats' | socat - UNIX-CONNECT:${socket} 2>/dev/null`"
    RETVAL=$?
else
    # nc check
    message="TCP ${host}:${port}"
    STATS="`echo 'stats' | nc ${host} ${port} 2>/dev/null`"
    RETVAL=$?
fi
if [ $RETVAL -eq 0 -a "${STATS:0:5}" == "STAT " ]; then
    exitmessage="OK: ${message} returning stats."
    exitstatus=$STATE_OK
else
    exitmessage="CRITICAL: ${message} not returning stats."
fi

echo $exitmessage
exit $exitstatus

